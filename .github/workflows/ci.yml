name: ci

on:
  pull_request:
    branches:
      - master
      - '**-dev'
  push:

jobs:
  build:
    strategy:
      matrix:
        module: [frontend, backend]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Check if there exists a pushed image
        id: dockerhub
        continue-on-error: true
        run: |
          curl -sf -H "Content-Type: application/json" https://hub.docker.com/v2/repositories/fyusufa/ft_transcendence_${{ matrix.module }}/tags/latest > /dev/null
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          ssh-key: ${{ secrets.git_ssh_key }}
      - name: Check for diff
        id: diff
        continue-on-error: true
        # docker-compose.prod.yml is not checked for a diff because it is not used in the CI, only in a deployment
        run: git diff origin/master --exit-code ${{ matrix.module }} dtos docker-compose.yml .github > /dev/null
      - name: Early exit
        id: early-exit
        continue-on-error: true
        run: |
          if [ "${{ steps.dockerhub.outcome }}" = "success" -a "${{ steps.diff.outcome }}" == "success" ]; then
            exit 1
          else
            exit 0
          fi
      - name: Set environment variables
        if: ${{ steps.early-exit.outcome == 'success' }}
        run: |
          cat .env.example | grep -v '^#' >> ${GITHUB_ENV}
          echo "BACKEND_42_UID=${{ secrets.BACKEND_42_UID }}" >> ${GITHUB_ENV}
          echo "BACKEND_42_SECRET=${{ secrets.BACKEND_42_SECRET }}" >> ${GITHUB_ENV}
          echo "BACKEND_JWT_SECRET_KEY=${{ secrets.BACKEND_JWT_SECRET_KEY }}" >> ${GITHUB_ENV}
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ${GITHUB_ENV}
      - uses: actions/setup-node@v3
        if: ${{ steps.early-exit.outcome == 'success' }}
        with:
          node-version: "${{ env.node_version }}"
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: Install dependencies
        if: ${{ steps.early-exit.outcome == 'success' }}
        run: |
          cd ${{ matrix.module }}
          npm ci
      - name: Lint
        if: ${{ steps.early-exit.outcome == 'success' }}
        run: |
          cd ${{ matrix.module }}
          npm run lint -- --no-fix --max-warnings=0
      - name: Unit tests
        if: ${{ steps.early-exit.outcome == 'success' }}
        run: |
          cd ${{ matrix.module }}
          npm run test:unit
      - name: Set up Docker Buildx
        if: ${{ steps.early-exit.outcome == 'success' }}
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        if: ${{ steps.early-exit.outcome == 'success' }}
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-images-test-${{ github.sha }}
          restore-keys: docker-images-test-
      - name: Build Containers
        if: ${{ steps.early-exit.outcome == 'success' }}
        run: |
          docker buildx bake --set *.cache-from="type=local,src=/tmp/.buildx-cache" --set *.cache-to="type=local,dest=/tmp/.buildx-cache-new" --file docker-compose.yml --load
      #- name: E2E Test
        #if: ${{ steps.early-exit.outcome == 'success' }}
        #run: |
          #docker-compose up -d
          #docker exec ft_transcendence_backend_1 npm run test:e2e
      - name: Move cache
        if: ${{ steps.early-exit.outcome == 'success' }}
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
